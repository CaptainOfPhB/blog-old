<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>船长の部落格</title><link>/</link><description>Recent content on 船长の部落格</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 10 Dec 2023 22:48:24 +0800</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>2023-09-10</title><link>/diary/2023-09-10/</link><pubDate>Sun, 10 Dec 2023 22:48:24 +0800</pubDate><guid>/diary/2023-09-10/</guid><description>8月 12 号的时候因为有两张之前买的洗车券还没用完，因此那天早上打算去洗车用掉一张。大早上八点就开车出门上高架了，结果没想到在高架入口上面追尾了。对方司机是一个老头，当时就联系了交警，因为追尾的缘故，我基本上是全责，所以就没有让警察来现场，走了快处易赔处理了。中午太平洋保险公司的人来看了我的车损后，我下午就开车去了 4s 店修车了，当时说要修两周，没办法只能等了。
接下来的一周都是坐公交车上班的。在没买车前一直都是骑自行车上班，后面偷懒打车，发现打车很麻烦，索性自己买了个车，结果在车送去 4s 店后，发现门口就有直达公司的 966 路公交车，我记了下时间发现和我自己开车去上班要花费的时间一样长，而且公交车人很少，凉快又舒服，当时觉得自己买车真不值得，早知道天天坐公交了。</description></item><item><title>2023-12-10</title><link>/diary/2023-12-10/</link><pubDate>Sun, 10 Dec 2023 22:23:30 +0800</pubDate><guid>/diary/2023-12-10/</guid><description>国庆节老娘们回家了，我宅在家玩了四天的《潜水员戴夫》，那几天刚好还感冒了。等国庆过完上了一周的班，然后请了几天的假，去丽水玩了一趟。先后去了仙都风景区，然后去了梯田风景区，要回来的那天路上还不断的吵架。
后面开始找房子，看了好几个房源，后面定在了骏景雅苑，因为房子便宜而且有固定车位，停车费也便宜，终于不用像景明花园那样停路边而且还得找位置了。后面开始整理东西搬家，搬过来已经到十月底了，然后又是一通收拾。
后面老娘们每周末出去学 HR 的课为了考证，后面还去北京出差了一趟。再后来我们产研出去团建了，就去阳澄湖吃了大闸蟹，没啥意思。后面又去迷你酌喝酒，然后上周末找周勋玩了。
没什么特别的事发生，最近几周一直在做饭，终于把才全部吃完了，打算先缓一缓，我妈给我寄了很多的东西，比如菜籽油、猪油、粉条、辣椒面还有浆水。前两周去附近的健身房老娘们办了一个卡，前几天去玩了一趟，搞得大腿内侧酸痛了几天。公司周一的羽毛球最近一直在去参加。
工作上越来越忙越来越累了，感觉也不是很快乐了，以后打算躺平了。
天气越来越冷了，下周开始气温零下，上海真正的冬天要来了。</description></item><item><title>How to Debug a Select or Dropdown Element in Web Page</title><link>/how-to-debug-a-select-or-dropdown-element-in-web-page/</link><pubDate>Mon, 13 Nov 2023 10:43:25 +0800</pubDate><guid>/how-to-debug-a-select-or-dropdown-element-in-web-page/</guid><description>Select element -&amp;gt; right click -&amp;gt; Break on -&amp;gt; subtree modifications</description></item><item><title>Git Use Multiple Users</title><link>/git-use-multiple-users/</link><pubDate>Wed, 05 Oct 2022 14:38:45 +0800</pubDate><guid>/git-use-multiple-users/</guid><description>Use &lt;code>[includeIf]&lt;/code> to auto toggle different user in git &amp;hellip;</description></item><item><title>Enhance Console Method</title><link>/enhance-console-method/</link><pubDate>Tue, 22 Feb 2022 21:48:52 +0800</pubDate><guid>/enhance-console-method/</guid><description>babel 最开始叫 6to5，顾名思义是 es6 转 es5，后面改名为 babel &amp;hellip;</description></item><item><title>TypeScript 类型体操通关秘籍（二)</title><link>/juejin-book-7047524421182947366-2/</link><pubDate>Fri, 18 Feb 2022 23:04:33 +0800</pubDate><guid>/juejin-book-7047524421182947366-2/</guid><description>TS 中的一些内置类型工具。</description></item><item><title>TypeScript 类型体操通关秘籍（一)</title><link>/juejin-book-7047524421182947366-1/</link><pubDate>Fri, 18 Feb 2022 21:45:07 +0800</pubDate><guid>/juejin-book-7047524421182947366-1/</guid><description>TS 中的一些小技巧。</description></item><item><title>GitHub Pages 如此愚蠢？</title><link>/github-page/</link><pubDate>Wed, 02 Jun 2021 13:56:28 +0800</pubDate><guid>/github-page/</guid><description>仓库下新建 .nojekyll 文件使 GitHub Pages 不将网站作为 jekyll 站点显示。</description></item><item><title>👋 Hi, I'm CaptainOfPhB 👨‍💻‍</title><link>/about-me/</link><pubDate>Tue, 01 Jun 2021 15:28:56 +0800</pubDate><guid>/about-me/</guid><description>Hi there, I&amp;rsquo;m CaptainOfPhB, a front-end developer from Shanghai, China.</description></item><item><title>记折腾博客（二）</title><link>/build-blog-2/</link><pubDate>Sun, 28 Feb 2021 17:04:17 +0800</pubDate><guid>/build-blog-2/</guid><description>将博客备份到 GitHub 和 GitLab 以保证更加安全。</description></item><item><title>记折腾博客（一）</title><link>/build-blog-1/</link><pubDate>Thu, 25 Feb 2021 15:55:08 +0800</pubDate><guid>/build-blog-1/</guid><description>将博客中的字体替换为了楷体字。</description></item><item><title>Unpublishing your package on npm</title><link>/unpublishing-your-package-on-npm/</link><pubDate>Mon, 25 Jan 2021 16:09:06 +0800</pubDate><guid>/unpublishing-your-package-on-npm/</guid><description>If your package is published on npm, for some reason, you want to unpublish a single version or the entire package, you can follow those steps.</description></item><item><title>TypeScript 学习笔记（二）</title><link>/typescript-note-2/</link><pubDate>Sun, 20 Sep 2020 14:16:27 +0800</pubDate><guid>/typescript-note-2/</guid><description>Literal Types 字面量（literal）：用于在代码中表示一个固定值（区别于变量，变量是可变化的） ts 中，对应的也有字面量类型。分为 String Literal Type、Number Literal Type、Boolean Literal Type 等 一般情况下，literal type 可以看做是对应的类型的子类型。比如 string literal type 可以认为是 string type 的 subtype。在这种前提下我们可以得知，literal type 是可以 assign 给对应父类型的，反之则不行（特殊情况可用 as）。以 string literal type 为例： type TypeScript = &amp;#39;TypeScript&amp;#39;; const ts: TypeScript = &amp;#39;TypeScript&amp;#39;; const sayHello = (name: string) =&amp;gt; console.</description></item><item><title>Java 学习笔记（三)</title><link>/java-note-3/</link><pubDate>Tue, 25 Jun 2019 11:03:15 +0800</pubDate><guid>/java-note-3/</guid><description>数据类型 Java 中一个 int 数据类型数据占 4 个字节（byte） 大小，32 位（bit）。最高位是符号位，剩下的 31 位存放数据 char 类型和 short 类型数据占用 2 个 byte，任何数据类型在内存中都是以二进制形式存储的 使用 man ascii 查看码表 java 中以 0 开头的数字表示 8 进制，以 0x 开头的数字表示 16 进制，0b 开头的数字表示 2 进制 java 中的数据分为原生类型和引用类型。只要能在 java 语言包中找到对应的 class 的就是引用类型，否则就是原生类型 java 中的基本类型有： 数据类型 byte int long double float char boolean void 所占空间（字节） 1 4 8 8 4 2 true/false 每个类型数据都有最大值最小值，如果超过最大最小范围， 则会发生溢出，数据会变为最初始的数值，例如: int a = 127; System.</description></item><item><title>Java 学习笔记（二)</title><link>/java-note-2/</link><pubDate>Mon, 17 Jun 2019 10:56:14 +0800</pubDate><guid>/java-note-2/</guid><description>java 是一门强类型的静态语言，编译器（compile）提供了最佳的安全保障 java 的跨平台性能良好（Windows、Linux、macOS），JVM（Java Virtual Machine）打通了不同平台和 java 之间的桥梁，这种中间层语言为 bytecode （字节码），java -&amp;gt; bytecode -&amp;gt; 机器码，一处编译，处处运行 class 类是 java 中的最小单位，一般放在与类同名的 .</description></item><item><title>Java 学习笔记（一)</title><link>/java-note-1/</link><pubDate>Sun, 16 Jun 2019 10:49:38 +0800</pubDate><guid>/java-note-1/</guid><description>JRE：java runtime environment，java 运行时环境 JDK：java development kit，java 开发工具集 JRE 和 JDK 不同之处大致在于：JRE 只可以运行 java 代码，而 JDK 既可以开发，又可以运行。抽象的理解为 JDK = JRE + javac JAVA_HOME：当前 JDK 的安装路径（可能存在多个 JDK 用来切换） java 作为开发学习是完全免费的，商用收费 java v1.</description></item><item><title>TypeScript 学习笔记（一）</title><link>/typescript-note-1/</link><pubDate>Thu, 09 May 2019 16:38:15 +0800</pubDate><guid>/typescript-note-1/</guid><description>ts 中的基础类型有：boolean、number、string、array、enum、元组 Tuple、any、null、undefined、never、object（除了 js 中的基础五大类型 string、number、boolean、symbol、null、undefined 之外可以用 object 类型表示） 定义数组有两种方式：&amp;lt;type&amp;gt;[] 或者使用泛型 Array&amp;lt;type&amp;gt; 元组类型表示已知数量和类型的数组，例如：let x = [number, string]。当访问越界元素时，会使用联合类型替代，例如： let x: [string, number]; x = [&amp;#39;hello&amp;#39;, 123]; // ok x = [123, &amp;#39;hello&amp;#39;]; // error // 越界元素将是 (number | string) 类型 x[3] = &amp;#39;world&amp;#39;; 枚举 enum 默认情况下，从 0 开始为元素编号，也可手动指定成员的值。也可以根据枚举的值得到 key 的名字，例如：enum Color = { Red, Green }，则 Color[1] 的值为 Green void 表示没有任何类型，只能给 void 类型数据赋值 null 或者 undefined null 和 undefined 类型是任何类型的子类型，可以赋值给任意类型的数据。在 tsconfig 中建议开启 strictNullChecks 选项，使 null 或 undefined 只能赋值给对应的 null 或 undefined 类型断言好比类型转换，当你比 ts 更了解某个值更确切的类型时。类型断言有两种，使用尖括号或者使用 as 语法，在 tsx 中只能使用 as。例如： let someValue: any = &amp;#39;this is a string&amp;#39; let strLength: number = (someValue as string).</description></item><item><title>Git 学习笔记（一）</title><link>/git-note-1/</link><pubDate>Wed, 08 May 2019 17:01:07 +0800</pubDate><guid>/git-note-1/</guid><description>git 查看文件改动状态使用 git status git 查看改动的内容使用 git diff git 查看提交记录使用 git log 命令 HEAD 指针表示的是当前版本，上一个版本为 HEAD^，再往上就是 HEAD^^，往上一百个版本可以写作 HEAD~100 git 回退至上个版本使用 git reset &amp;ndash;hard HEAD^，若回退至指定版本，先使用 git log 查看版本的 hash，然后使用 git reset &amp;ndash;hard &amp;lt;hash_version&amp;gt; 如果回退版本后又想回到最新的版本，在不知道最新版本 hash 的情况下，使用 git reflog 查看所有 commit 的 hash，然后使用 git reset &amp;ndash;hard &amp;lt;hash_version&amp;gt; 进行回退或者前进 git VCS 分为工作区和版本库（暂存区与分支），git add 命令将改动添加进入暂存区，git commit 将改动添加到分支 工作区的文件发生了改动，想要撤销修改，可以使用 git checkout &amp;ndash; &amp;lt;file_name&amp;gt; 来撤销掉修改，注意必须要加 &amp;ndash; 符号（&amp;ndash; 与文件名之间有空格），否则 git 会认为是要切换分支 如果文件发生了改动并且已经添加到暂存区，想撤销掉暂存区的改动，使用 git reset HEAD &amp;lt;file_name&amp;gt; 命令，这样就把修改了的文件又放回工作区了，暂存区是干净的，放置到工作区后，再使用 git checkout &amp;ndash; &amp;lt;file_name&amp;gt; 将放置在工作区的文件改动撤销掉，这样两步操作就将文件的改动彻底还原了 查看工作区与版本库文件的差异可以使用 git diff HEAD &amp;ndash; &amp;lt;file_name&amp;gt;（同样，&amp;ndash; 与文件名之间有空格） 如果工作区的文件被误删除，想要恢复可以使用 git checkout &amp;ndash; &amp;lt;file_name&amp;gt;，git checkout 其实是用版本库里的版本替换工作区的版本操作，无论是工作区的修改还是删除，都可以用该命令一键还原 本地分支首次推向远程分支的时候可以使用 git push -u origin &amp;lt;branch_name&amp;gt;，其中 -u 参数是 &amp;ndash;set-upstream 的简写 切换分支使用 git checkout &amp;lt;branch_name&amp;gt;，创建并切换新分支时需要加上 -b 参数，创建新分支使用 git branch &amp;lt;branch_name&amp;gt;，查看分支 git branch 合并分支使用 git merge &amp;lt;branch_name&amp;gt;，删除使用 git branch -d &amp;lt;branch_name&amp;gt; git merge 合并分支产生冲突时，先解决冲突，再添加至暂存区，然后提交。解决冲突时，&amp;laquo;&amp;laquo;&amp;lt; HEAD 到 ===== 部分是当前分支的内容，&amp;raquo;&amp;raquo;&amp;gt; 到 ===== 部分是需要并入的分支的内容，确定好要保留好的内容后保存并退出，然后提交。提交成功后，使用 git log &amp;ndash;graph 可查看分支合并图 如果合并分支时产生冲突，想要还原回原来的状态，可以适用 git merge &amp;ndash;abort 命令 git 可以将工作区暂时的改动“存储”起来，当你不想将改动提交至暂存区时。使用 git stash 命令即可。当你想将“存储”的内容释放出来时，先使用 git stash list 查看，然后进行恢复。恢复命令有两条，使用 git stash apply &amp;lt;shash@{index}&amp;gt; （这个括号里面的内容是可选的，可以指定恢复第几个 stash 的内容，在多次 stash 时使用)，可以将存储的内容恢复至工作区，但是存储的内容并不会删除，需要删除可以使用 git stash drop &amp;lt;shash@{index}&amp;gt; 命令；另一种方式是使用 git stash pop &amp;lt;shash@{index}&amp;gt; 命令，该条命令会在恢复之后同时删除 stash 区域的内容 查看远程仓库的信息使用 git remote -v 本地分支与远程分支进行关联使用 git branch -u &amp;lt;branch_name&amp;gt; origin/&amp;lt;branch_name&amp;gt; 创建标签使用 git tag -a &amp;lt;tag_name&amp;gt; -m &amp;lt;tag_description&amp;gt; &amp;lt;commit_hash&amp;gt;，查看一个标签的内容可以使用 git show &amp;lt;tag_name&amp;gt; 推送标签可以使用 git push origin &amp;lt;tag_name&amp;gt;，一次性推送可以使用 git push origun &amp;ndash;tags 命令，删除本地标签可以使用 git tag -d &amp;lt;tag_name&amp;gt;，删除远程标签使用 git push origin :refs/tags/&amp;lt;tag_name&amp;gt; 完。</description></item><item><title>React 学习笔记（一）</title><link>/react-note-1/</link><pubDate>Tue, 16 Apr 2019 17:05:16 +0800</pubDate><guid>/react-note-1/</guid><description>React 可能会把多个 setState() 调用合并成一个调用。 因为 this.props 和 this.state 可能会异步更新，所以你不要依赖他们的值来更新下一个状态 // this.</description></item><item><title>我常用的 Git 命令（译）</title><link>/commonly-used-git-commands/</link><pubDate>Tue, 24 Jul 2018 18:04:02 +0800</pubDate><guid>/commonly-used-git-commands/</guid><description>本文是对 Medium 上一篇国外开发者写的博客的翻译。</description></item><item><title>数据类型</title><link>/data-type/</link><pubDate>Thu, 19 Jul 2018 17:55:23 +0800</pubDate><guid>/data-type/</guid><description>JavaScript 中的数据类型有 String、Number、Boolean、Null、Undefined、Object、Symbol 七大类。</description></item><item><title>Vue 中 Computed、Watch 和 Methods 的区别</title><link>/vue-computed-watch-methods/</link><pubDate>Tue, 17 Jul 2018 17:38:47 +0800</pubDate><guid>/vue-computed-watch-methods/</guid><description>本文主要介绍 Vue 中 computed、watch 以及 methods 的异同以及使用场景。</description></item><item><title>Object.freeze 和 Object.seal</title><link>/object-freeze-and-object-seal/</link><pubDate>Mon, 16 Jul 2018 17:32:12 +0800</pubDate><guid>/object-freeze-and-object-seal/</guid><description>本文主要介绍 Object.freeze 和 Object.seal 两个 api。</description></item><item><title>Object.defineProperty</title><link>/object-defineproperty/</link><pubDate>Mon, 16 Jul 2018 17:20:12 +0800</pubDate><guid>/object-defineproperty/</guid><description>Object.defineProperty 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回这个对象。</description></item><item><title>如何使用 Shadowsocks 获取谷歌服务</title><link>/use-google-by-shadowsocks/</link><pubDate>Fri, 29 Jun 2018 17:00:57 +0800</pubDate><guid>/use-google-by-shadowsocks/</guid><description>由于我国网络的特殊限制，很多墙外的优质资源不能够直接访问， GFW（Great FireWall，防火长城）就是互联网上那道巍峨的墙，深受程序员的痛恶。
IP 黑名单 当你打开浏览器键入 URL 访问网络资源时，域名会被解析为 IP 地址（DNS 解析，一般由网络运营商提供，或者你也可以自己指定 DNS 服务器，例如谷歌的 DNS：8.</description></item><item><title>如何将域名映射至 Github 仓库</title><link>/domain-to-github/</link><pubDate>Fri, 29 Jun 2018 16:49:00 +0800</pubDate><guid>/domain-to-github/</guid><description>在域名服务商后台添加域名解析，同时在仓库下新建 CNAME 文件填入完整域名，过半小时左右即可生效。</description></item><item><title>实用的命令行工具</title><link>/command-line-tool/</link><pubDate>Thu, 28 Jun 2018 16:36:16 +0800</pubDate><guid>/command-line-tool/</guid><description>工欲善其事，必先利其器。本文介绍一些比较实用的命令行工具以及技巧。</description></item><item><title>优雅的 Git 提交信息</title><link>/git-message/</link><pubDate>Wed, 27 Jun 2018 16:05:17 +0800</pubDate><guid>/git-message/</guid><description>写好 commit message 不仅有助于他人 review，还可以有效的输出 change log，对项目的管理实际至关重要。</description></item><item><title>文本溢出省略</title><link>/text-overflow/</link><pubDate>Tue, 26 Jun 2018 15:54:02 +0800</pubDate><guid>/text-overflow/</guid><description>CSS 中的 text-overflow 属性用来处理这样一种情况：当文本超出了他所在元素的盒子（边界）时，将文本进行剪切。</description></item><item><title>HTTPS</title><link>/https/</link><pubDate>Sat, 02 Jun 2018 15:35:38 +0800</pubDate><guid>/https/</guid><description>HTTPS = HTTP（Hyper Text Transfer Protocol）+ SSL（Secure Sockets Layer）/ TLS（Transport Layer Security）.</description></item><item><title>CSS 常见布局</title><link>/css-layout/</link><pubDate>Fri, 16 Mar 2018 14:55:37 +0800</pubDate><guid>/css-layout/</guid><description>CSS 是一门艺术，学好 CSS 需要投入大量的时间去实践，今天我们主要聊一聊工作中常用到的 CSS 布局套路。</description></item><item><title>脚本</title><link>/script/</link><pubDate>Tue, 10 Oct 2017 11:47:01 +0800</pubDate><guid>/script/</guid><description>参照脚本的原意，让计算机按照我们写好的指令去执行或者演出的文件，我们称之脚本文件，生成脚本文件的语言我们称之为脚本语言（Scripting language）。</description></item></channel></rss>