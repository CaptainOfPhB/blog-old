<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TypeScript on 船长的部落格</title>
    <link>https://captainofphb.gitee.io/tags/typescript/</link>
    <description>Recent content in TypeScript on 船长的部落格</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 20 Sep 2020 14:16:27 +0800</lastBuildDate><atom:link href="https://captainofphb.gitee.io/tags/typescript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TypeScript 学习笔记（三）</title>
      <link>https://captainofphb.gitee.io/2020/09/20/typescript-note-3/</link>
      <pubDate>Sun, 20 Sep 2020 14:16:27 +0800</pubDate>
      
      <guid>https://captainofphb.gitee.io/2020/09/20/typescript-note-3/</guid>
      <description>Literal Types  字面量（literal）：用于在代码中表示一个固定值（区别于变量，变量是可变化的） ts 中，对应的也有字面量类型。分为 String Literal Type、Number Literal Type、Boolean Literal Type 等 一般情况下，literal type 可以看做是对应的类型的子类型。比如 string literal type 可以认为是 string type 的 subtype。在这种前提下我们可以得知，literal type 是可以 assign 给对应父类型的，反之则不行（特殊情况可用 as）。以 string literal type 为例：  type TypeScript = &amp;#39;TypeScript&amp;#39;; const ts: TypeScript = &amp;#39;TypeScript&amp;#39;; const sayHello = (name: string) =&amp;gt; console.</description>
    </item>
    
    <item>
      <title>TypeScript 学习笔记（一）</title>
      <link>https://captainofphb.gitee.io/2019/05/09/typescript-note-1/</link>
      <pubDate>Thu, 09 May 2019 16:38:15 +0800</pubDate>
      
      <guid>https://captainofphb.gitee.io/2019/05/09/typescript-note-1/</guid>
      <description>ts 中的基础类型有：boolean、number、string、array、enum、元组 Tuple、any、null、undefined、never、object（除了 js 中的基础五大类型 string、number、boolean、symbol、null、undefined 之外可以用 object 类型表示） 定义数组有两种方式：&amp;lt;type&amp;gt;[] 或者使用泛型 Array&amp;lt;type&amp;gt; 元组类型表示已知数量和类型的数组，例如：let x = [number, string]。当访问越界元素时，会使用联合类型替代，例如：  let x: [string, number]; x = [&amp;#39;hello&amp;#39;, 123]; // ok x = [123, &amp;#39;hello&amp;#39;]; // error // 越界元素将是 (number | string) 类型 x[3] = &amp;#39;world&amp;#39;;  枚举 enum 默认情况下，从 0 开始为元素编号，也可手动指定成员的值。也可以根据枚举的值得到 key 的名字，例如：enum Color = { Red, Green }，则 Color[1] 的值为 Green void 表示没有任何类型，只能给 void 类型数据赋值 null 或者 undefined null 和 undefined 类型是任何类型的子类型，可以赋值给任意类型的数据。在 tsconfig 中建议开启 stricNullChecks 选项，使 null 或 undefined 只能赋值给对应的 null 或 undefined 类型断言好比类型转换，当你比 ts 更了解某个值更确切的类型时。类型断言有两种，使用尖括号或者使用 as 语法，在 tsx 中只能使用 as。例如：  let someValue: any = &amp;#39;this is a string&amp;#39; let strLength: number = (someValue as string).</description>
    </item>
    
  </channel>
</rss>
